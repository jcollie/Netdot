#Updates netdot database from version 0.9 to version 1.0

use warnings;
use strict;
use lib "../lib";
use DBUTIL;
use Netdot;
use Netdot::Model;
use Netdot::Meta;
use Data::Dumper;

my %CONFIG;
$CONFIG{debug} = 1;
$CONFIG{CONFIG_DIR} = "../etc";
$CONFIG{SCHEMA_FILE}  = "$CONFIG{CONFIG_DIR}/netdot.meta";
$CONFIG{DEFAULT_DATA} = "$CONFIG{CONFIG_DIR}/default_data";

my $netdot_config = Netdot::Config->new(config_dir => $CONFIG{CONFIG_DIR});

my $dbh = &dbconnect();
my @statements = ();

if ($netdot_config->get('DB_TYPE') eq "mysql") {
    @statements = (
    "CREATE TABLE `asset` (
      `date_purchased` timestamp DEFAULT '1970-01-01 00:00:01',
      `id` bigint NOT NULL auto_increment,
      `info` text,
      `inventory_number` varchar(255),
      `maint_contract` integer NOT NULL,
      `maint_from` date,
      `maint_until` date,
      `product_id` integer NOT NULL,
      `serial_number` varchar(255),
      `custom_serial` varchar(255),
      UNIQUE INDEX Asset1 (`serial_number`, `product_id`),
      INDEX Asset2 (`product_id`),
      INDEX Asset3 (`inventory_number`),
      PRIMARY KEY (`id`)
    ) ENGINE=InnoDB;",
        );
} elsif ($netdot_config->get('DB_TYPE') eq "Pg") {
    my $u = $netdot_config->get('DB_NETDOT_USER');
    @statements = (
    "CREATE TABLE asset (
      date_purchased timestamp DEFAULT '1970-01-01 00:00:01',
      id serial PRIMARY KEY,
      info text,
      inventory_number varchar(255),
      maint_contract integer NOT NULL,
      maint_from date,
      maint_until date,
      product_id integer NOT NULL,
      serial_number varchar(255),
      custom_serial varchar(255),
      CONSTRAINT Asset1 UNIQUE (serial_number, product_id)
    );",
    "CREATE INDEX Asset2 ON asset (product_id);",
    "CREATE INDEX Asset3 ON asset (inventory_number);",
    "GRANT ALL ON asset TO $u;"
        );
}

&processdata(\@statements);

# Store assets to be inserted, keyed by serial number
my %assets;

my $d = $dbh->prepare('SELECT serialnumber,custom_serial,inventorynumber,maint_contract,maint_from,maint_until,product 
                       FROM   device
		       WHERE  serialnumber is not NULL
    ');
$d->execute();
my $devices = $d->fetchall_arrayref();

foreach my $row ( @$devices ){
    my $sn = $row->[0];
    $sn =~ s/^\s*(\w+)\s*$/$1/;
    my $i = 1;
    foreach my $v (qw/cs in mc mf mu pr/){
	$assets{$sn}{$v} = $row->[$i];
	$i++;
    }
}

my $dm = $dbh->prepare('SELECT serialnumber,inventorynumber,maint_contract,maint_from,maint_until 
                        FROM   devicemodule
		        WHERE  serialnumber is not NULL
    ');
$dm->execute();
my $device_modules = $dm->fetchall_arrayref();

foreach my $row ( @$device_modules ){
    my $sn = $row->[0];
    $sn =~ s/^\s*(\w+)\s*$/$1/;
    next if exists $assets{$sn};
    my $i = 1;
    foreach my $v (qw/in mc mf mu/){
	$assets{$sn}{v} = $row->[$i];
	$i++;
    }
}

my $ia = $dbh->prepare('INSERT INTO asset (serial_number,custom_serial,inventory_number,maint_contract,maint_from,maint_until,product_id)
        VALUES (?,?,?,?,?,?,?)');

foreach my $sn ( keys %assets ){
    my %vals = %{$assets{$sn}};
    my ($cs,$in,$mc,$mf,$mu,$pr) = @vals{'cs','in','mc','mf','mu','pr'};
    $mc ||= 0; $pr ||= 0;
    $ia->execute($sn,$cs,$in,$mc,$mf,$mu,$pr);
}

# Grab hostaudit data before conversion
my %haudit;
my $hq = $dbh->prepare('SELECT          ha.id,zone.name,dhcpscope.name  
                        FROM            hostaudit ha 
                        LEFT OUTER JOIN zone ON ha.zone=zone.id 
                        LEFT OUTER JOIN dhcpscope ON ha.scope=dhcpscope.id');
$hq->execute();
my $haudits = $hq->fetchall_arrayref();

foreach my $row ( @$haudits ){
    my ($id, $zone, $scope) = @$row;
    $haudit{$id}{zone}  = $zone;
    $haudit{$id}{scope} = $scope;
}
 


if ($netdot_config->get('DB_TYPE') eq "mysql") {
    my $dbname = $netdot_config->get('DB_DATABASE');
    @statements = (
            "ALTER DATABASE $dbname CHARACTER SET utf8 COLLATE utf8_general_ci;",
            "ALTER TABLE device ADD COLUMN asset_id bigint NOT NULL AFTER aliases;",
            "ALTER TABLE device ADD COLUMN extension integer NULL AFTER down_until;",
            "ALTER TABLE device_history ADD COLUMN asset_id bigint NOT NULL AFTER aliases;",
            "ALTER TABLE device_history ADD COLUMN extension integer NULL AFTER down_until;",
            "ALTER TABLE devicemodule ADD COLUMN asset_id bigint NOT NULL FIRST;",
            "UPDATE device,asset SET device.asset_id=asset.id WHERE asset.serial_number=device.serialnumber;",
            "UPDATE devicemodule,asset SET devicemodule.asset_id=asset.id WHERE asset.serial_number=devicemodule.serialnumber;",
            "UPDATE asset,device,devicemodule SET asset.product_id=device.product WHERE devicemodule.device=device.id AND devicemodule.asset_id=asset.id;",
            "ALTER TABLE device DROP COLUMN serialnumber;",
            "ALTER TABLE device DROP COLUMN inventorynumber;",
            "ALTER TABLE device DROP COLUMN maint_contract;",
            "ALTER TABLE device DROP COLUMN maint_from;",
            "ALTER TABLE device DROP COLUMN maint_until;",
            "ALTER TABLE device DROP COLUMN custom_serial;",
            "ALTER TABLE device ADD INDEX Device13 (asset_id);",
            "ALTER TABLE device ADD INDEX Device14 (extension);",
            "ALTER TABLE device_history DROP COLUMN serialnumber;",
            "ALTER TABLE device_history DROP COLUMN inventorynumber;",
            "ALTER TABLE device_history DROP COLUMN maint_contract;",
            "ALTER TABLE device_history DROP COLUMN maint_from;",
            "ALTER TABLE device_history DROP COLUMN maint_until;",
            "ALTER TABLE device_history DROP COLUMN custom_serial;",
            "ALTER TABLE devicemodule DROP COLUMN serialnumber;",
            "ALTER TABLE devicemodule DROP COLUMN inventorynumber;",
            "ALTER TABLE devicemodule DROP COLUMN maint_contract;",
            "ALTER TABLE devicemodule DROP COLUMN maint_from;",
            "ALTER TABLE devicemodule DROP COLUMN maint_until;",
            "ALTER TABLE devicemodule ADD INDEX devicemodule2 (asset_id);",
	    "ALTER TABLE dhcpscope ADD COLUMN duid varchar(255);",
	    "ALTER TABLE dhcpscope ADD COLUMN version integer;",
            "ALTER TABLE interface MODIFY COLUMN speed bigint;",
            "ALTER TABLE product ADD COLUMN mfg_number varchar(255);",
            "ALTER TABLE datacache MODIFY COLUMN tstamp bigint NOT NULL;",
            "DELETE FROM datacache;",
            "ALTER TABLE device ADD COLUMN snmp_conn_attempts integer AFTER snmp_bulk;",
            "ALTER TABLE device ADD COLUMN snmp_down tinyint(1) NOT NULL AFTER snmp_conn_attempts;",
            "ALTER TABLE device_history ADD COLUMN snmp_conn_attempts integer AFTER snmp_bulk;",
            "ALTER TABLE device_history ADD COLUMN snmp_down tinyint(1) NOT NULL AFTER snmp_conn_attempts;",
            "ALTER TABLE rr ADD COLUMN created timestamp AFTER auto_update;",
            "ALTER TABLE rr ADD COLUMN modified timestamp AFTER info;",
            "ALTER TABLE rr ADD INDEX RR4 (`created`);",
            "ALTER TABLE rr ADD INDEX RR5 (`modified`);",
            "ALTER TABLE zone ADD COLUMN include blob AFTER id;",
            "ALTER TABLE rrloc MODIFY COLUMN latitude bigint NOT NULL;",
            "ALTER TABLE rrloc MODIFY COLUMN longitude bigint NOT NULL;",
            "ALTER TABLE rrloc MODIFY COLUMN altitude bigint NOT NULL;",
            "ALTER TABLE zone MODIFY COLUMN minimum bigint NOT NULL;",
            "ALTER TABLE zone MODIFY COLUMN serial bigint NOT NULL;",
            "ALTER TABLE bgppeering ADD COLUMN authkey varchar(255);",
            "ALTER TABLE bgppeering ADD COLUMN info text;",
            "ALTER TABLE bgppeering ADD COLUMN max_v4_prefixes integer;",
            "ALTER TABLE bgppeering ADD COLUMN max_v6_prefixes integer;",
            "ALTER TABLE hostaudit MODIFY COLUMN zone varchar(255);",
            "ALTER TABLE hostaudit MODIFY COLUMN scope varchar(255);",
            "ALTER TABLE hostaudit CHANGE COLUMN user username varchar(255);",
            "ALTER TABLE dhcpscope MODIFY COLUMN text text;",
            "ALTER TABLE dhcpscope MODIFY COLUMN export_file varchar(255);",
            "ALTER TABLE dhcpscope MODIFY COLUMN failover_peer varchar(128);",
            "ALTER TABLE zone MODIFY COLUMN include text;",
            "ALTER TABLE savedqueries MODIFY COLUMN querytext text;",
            );
} elsif ($netdot_config->get('DB_TYPE') eq "Pg") {
    @statements = (
            "ALTER TABLE device ADD COLUMN asset_id bigint NOT NULL;",
            "ALTER TABLE device ADD COLUMN extension integer NULL;",
            "ALTER TABLE device_history ADD COLUMN asset_id bigint NOT NULL;",
            "ALTER TABLE device_history ADD COLUMN extension integer NULL;",
            "ALTER TABLE devicemodule ADD COLUMN asset_id bigint NOT NULL;",
            "UPDATE device SET asset_id=asset.id FROM asset WHERE asset.serial_number=device.serialnumber;",
            "UPDATE devicemodule SET asset_id=asset.id FROM asset WHERE asset.serial_number=devicemodule.serialnumber;",
            "UPDATE asset SET product_id=device.product FROM device, devicemodule WHERE devicemodule.device=device.id AND devicemodule.asset_id=asset.id;",
            "ALTER TABLE device DROP COLUMN serialnumber;",
            "ALTER TABLE device DROP COLUMN inventorynumber;",
            "ALTER TABLE device DROP COLUMN maint_contract;",
            "ALTER TABLE device DROP COLUMN maint_from;",
            "ALTER TABLE device DROP COLUMN maint_until;",
            "ALTER TABLE device DROP COLUMN custom_serial;",
            "CREATE INDEX Device13 ON device(asset_id);",
            "CREATE INDEX Device14 ON device(extension);",
            "ALTER TABLE device_history DROP COLUMN serialnumber;",
            "ALTER TABLE device_history DROP COLUMN inventorynumber;",
            "ALTER TABLE device_history DROP COLUMN maint_contract;",
            "ALTER TABLE device_history DROP COLUMN maint_from;",
            "ALTER TABLE device_history DROP COLUMN maint_until;",
            "ALTER TABLE device_history DROP COLUMN custom_serial;",
            "ALTER TABLE devicemodule DROP COLUMN serialnumber;",
            "ALTER TABLE devicemodule DROP COLUMN inventorynumber;",
            "ALTER TABLE devicemodule DROP COLUMN maint_contract;",
            "ALTER TABLE devicemodule DROP COLUMN maint_from;",
            "ALTER TABLE devicemodule DROP COLUMN maint_until;",
	    "ALTER TABLE dhcpscope ADD COLUMN duid varchar(255);",
	    "ALTER TABLE dhcpscope ADD COLUMN version integer;",
            "CREATE INDEX devicemodule2 ON devicemodule(asset_id);",
            "ALTER TABLE interface ALTER COLUMN speed TYPE bigint;",
            "ALTER TABLE product ADD COLUMN mfg_number varchar(255);",
            "DELETE FROM datacache;",
            "ALTER TABLE device ADD COLUMN snmp_conn_attempts integer;",
            "ALTER TABLE device ADD COLUMN snmp_down smallint NOT NULL;",
            "ALTER TABLE device_history ADD COLUMN snmp_conn_attempts integer;",
            "ALTER TABLE device_history ADD COLUMN snmp_down smallint NOT NULL;",
            "ALTER TABLE rr ADD COLUMN created timestamp;",
            "ALTER TABLE rr ADD COLUMN modified timestamp;",
            "CREATE INDEX RR4 ON rr(created);",
            "CREATE INDEX RR5 ON rr(modified);",
            "ALTER TABLE zone ADD COLUMN include text;",
            "ALTER TABLE rrloc ALTER COLUMN latitude TYPE bigint;",
            "ALTER TABLE rrloc ALTER COLUMN longitude TYPE bigint;",
            "ALTER TABLE rrloc ALTER COLUMN altitude TYPE bigint;",
            "ALTER TABLE zone ALTER COLUMN minimum TYPE bigint;",
            "ALTER TABLE zone ALTER COLUMN serial TYPE bigint;",
            "ALTER TABLE bgppeering ADD COLUMN authkey varchar(255);",
            "ALTER TABLE bgppeering ADD COLUMN info text;",
            "ALTER TABLE bgppeering ADD COLUMN max_v4_prefixes integer;",
            "ALTER TABLE bgppeering ADD COLUMN max_v6_prefixes integer;",
            "ALTER TABLE hostaudit ALTER COLUMN zone TYPE varchar(255);",
            "ALTER TABLE hostaudit ALTER COLUMN scope TYPE varchar(255);",
            "ALTER TABLE hostaudit RENAME COLUMN \"user\" TO username;",
            "ALTER TABLE dhcpscope ALTER COLUMN text TYPE text;",
            "ALTER TABLE dhcpscope ALTER COLUMN export_file TYPE varchar(255);",
            "ALTER TABLE dhcpscope ALTER COLUMN failover_peer TYPE varchar(128);",
            "ALTER TABLE zone ALTER COLUMN include TYPE text;",
            "ALTER TABLE savedqueries ALTER COLUMN querytext TYPE text;",
            );
}

# Change all table IDs and foreign keys to bigint (Ticket #737)
# Also, set them to NULLable and replace 0s with NULL values
my $meta = Netdot::Meta->new();
my @tables = $meta->get_tables(with_history=>1);

foreach my $mtable ( sort { $a->name cmp $b->name } @tables ){
    my $tname = lc($mtable->name);
    foreach my $mcol ( $mtable->get_columns ) {
        my $cname = $mcol->name;
        if ( $cname eq 'id' ){
            if ($netdot_config->get('DB_TYPE') eq "mysql") {
                push @statements, "ALTER TABLE $tname MODIFY COLUMN $cname bigint NOT NULL auto_increment;"
            } elsif ($netdot_config->get('DB_TYPE') eq "Pg") {
                push @statements, "ALTER TABLE $tname ALTER COLUMN $cname TYPE bigint;";
            }
        } elsif ($cname eq 'info') {
            if ($netdot_config->get('DB_TYPE') eq "mysql") {
                push @statements, "ALTER TABLE $tname MODIFY COLUMN $cname text;"
            } elsif ($netdot_config->get('DB_TYPE') eq "Pg") {
                push @statements, "ALTER TABLE $tname ALTER COLUMN $cname TYPE text;";
            }
        }
        if ( $mcol->links_to ){
            if ($netdot_config->get('DB_TYPE') eq "mysql") {
                push @statements, "ALTER TABLE $tname MODIFY COLUMN $cname bigint;";
            } elsif ($netdot_config->get('DB_TYPE') eq "Pg") {
                push @statements, "ALTER TABLE $tname ALTER COLUMN $cname DROP NOT NULL;";
                push @statements, "ALTER TABLE $tname ALTER COLUMN $cname TYPE bigint;";
            }
            push @statements, "UPDATE $tname SET $cname=NULL WHERE $cname=0;";
        }
    }

    if ($netdot_config->get('DB_TYPE') eq "mysql") {
        push @statements, "ALTER TABLE $tname CONVERT TO CHARACTER SET utf8 COLLATE utf8_general_ci;";
    } 
}

# Exceptions
if ($netdot_config->get('DB_TYPE') eq "mysql") {
    push @statements, "ALTER TABLE accessright MODIFY COLUMN object_id bigint NOT NULL;"
} elsif ($netdot_config->get('DB_TYPE') eq "Pg") {
    push @statements, "ALTER TABLE accessright ALTER COLUMN object_id TYPE bigint;"
}


# Update hostaudit with string data
#
foreach my $hid ( keys %haudit ){
    my ($zone, $scope) = ($haudit{$hid}{zone}, $haudit{$hid}{scope});
    next unless ($zone || $scope);
    my $st = 'UPDATE hostaudit SET';
    $st .= " zone='$zone'" if $zone;
    $st .= "," if ($zone && $scope);
    $st .= " scope='$scope'" if $scope;
    $st .= " WHERE id=$hid;";
    push @statements,  $st;
}

# Set version to 4 on current global DhcpScopes
push @statements, "UPDATE dhcpscope,dhcpscopetype SET dhcpscope.version=4 WHERE dhcpscopetype.name='global' AND dhcpscope.type=dhcpscopetype.id;";

# Add new DHCP attributes
push @statements, "INSERT INTO dhcpattrname (name) VALUES ('allow leasequery');",
push @statements, "INSERT INTO dhcpattrname (name) VALUES ('preferred-lifetime');",
push @statements, "INSERT INTO dhcpattrname (name) VALUES ('option dhcp6.name-servers');",
push @statements, "INSERT INTO dhcpattrname (name) VALUES ('option dhcp6.domain-search');",
push @statements, "INSERT INTO dhcpattrname (name) VALUES ('option dhcp6.preference');",
push @statements, "INSERT INTO dhcpattrname (name) VALUES ('option dhcp6.rapid-commit');",
push @statements, "INSERT INTO dhcpattrname (name) VALUES ('option dhcp6.info-refresh-time');",
push @statements, "INSERT INTO dhcpattrname (name) VALUES ('dhcpv6-lease-file-name');",
push @statements, "INSERT INTO dhcpattrname (name) VALUES ('range6');",
push @statements, "INSERT INTO dhcpattrname (name) VALUES ('prefix6');",

&processdata(\@statements);

##################   THIS HAS TO BE THE LAST THING   #######################
# Add FK constraints. 
my @schema = &generate_schema_from_metadata();
if ($netdot_config->get('DB_TYPE') eq "mysql") {
    @statements = ('SET foreign_key_checks=0;');
    my $fk_table;
    foreach ( @schema ){
        if ( /^CREATE TABLE `(\S+)`/ ){
            $fk_table = $1;
        }elsif ( /CONSTRAINT/ ){
            $_ =~ s/^\s+//; # Remove leading spaces
                $_ =~ s/,$//;   # Remove last comma
                push @statements, "ALTER TABLE $fk_table ADD $_;";
        }
    }
    push @statements, 'SET foreign_key_checks=1;';
} elsif ($netdot_config->get('DB_TYPE') eq "Pg") {
    @statements = ();
    foreach (0 .. $#schema ) { 
        if ( $schema[$_] =~  m/^ALTER TABLE "\S+" ADD FOREIGN KEY/ ) { 
            push @statements, $schema[$_] . $schema[$_ + 1];;
        }   
    }
}
&processdata(\@statements);

&dbdisconnect();

